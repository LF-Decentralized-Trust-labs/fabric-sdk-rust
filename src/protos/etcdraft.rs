// This file is @generated by prost-build.
/// BlockMetadata stores data used by the Raft OSNs when
/// coordinating with each other, to be serialized into
/// block meta dta field and used after failres and restarts.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockMetadata {
    /// Maintains a mapping between the cluster's OSNs
    /// and their Raft IDs.
    #[prost(uint64, repeated, tag = "1")]
    pub consenter_ids: ::prost::alloc::vec::Vec<u64>,
    /// Carries the Raft ID value that will be assigned
    /// to the next OSN that will join this cluster.
    #[prost(uint64, tag = "2")]
    pub next_consenter_id: u64,
    /// Index of etcd/raft entry for current block.
    #[prost(uint64, tag = "3")]
    pub raft_index: u64,
}
/// ClusterMetadata encapsulates metadata that is exchanged among cluster nodes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterMetadata {
    /// Indicates active nodes in cluster that are reacheable by Raft leader
    #[prost(uint64, repeated, tag = "1")]
    pub active_nodes: ::prost::alloc::vec::Vec<u64>,
}
/// ConfigMetadata is serialized and set as the value of ConsensusType.Metadata in
/// a channel configuration when the ConsensusType.Type is set "etcdraft".
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigMetadata {
    #[prost(message, repeated, tag = "1")]
    pub consenters: ::prost::alloc::vec::Vec<Consenter>,
    #[prost(message, optional, tag = "2")]
    pub options: ::core::option::Option<Options>,
}
/// Consenter represents a consenting node (i.e. replica).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Consenter {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(bytes = "vec", tag = "3")]
    pub client_tls_cert: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub server_tls_cert: ::prost::alloc::vec::Vec<u8>,
}
/// Options to be specified for all the etcd/raft nodes. These can be modified on a
/// per-channel basis.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Options {
    /// time duration format, e.g. 500ms
    #[prost(string, tag = "1")]
    pub tick_interval: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub election_tick: u32,
    #[prost(uint32, tag = "3")]
    pub heartbeat_tick: u32,
    #[prost(uint32, tag = "4")]
    pub max_inflight_blocks: u32,
    /// Take snapshot when cumulative data exceeds certain size in bytes.
    #[prost(uint32, tag = "5")]
    pub snapshot_interval_size: u32,
}
