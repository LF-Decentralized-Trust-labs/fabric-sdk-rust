// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BroadcastResponse {
    /// Status code, which may be used to programatically respond to success/failure
    #[prost(enumeration = "super::common::Status", tag = "1")]
    pub status: i32,
    /// Info string which may contain additional information about the status returned
    #[prost(string, tag = "2")]
    pub info: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekNewest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekOldest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekSpecified {
    #[prost(uint64, tag = "1")]
    pub number: u64,
}
/// SeekNextCommit refers to the next block that will be committed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekNextCommit {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekPosition {
    #[prost(oneof = "seek_position::Type", tags = "1, 2, 3, 4")]
    pub r#type: ::core::option::Option<seek_position::Type>,
}
/// Nested message and enum types in `SeekPosition`.
pub mod seek_position {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "1")]
        Newest(super::SeekNewest),
        #[prost(message, tag = "2")]
        Oldest(super::SeekOldest),
        #[prost(message, tag = "3")]
        Specified(super::SeekSpecified),
        #[prost(message, tag = "4")]
        NextCommit(super::SeekNextCommit),
    }
}
/// SeekInfo specifies the range of requested blocks to return
/// If the start position is not found, an error is immediately returned
/// Otherwise, blocks are returned until a missing block is encountered, then behavior is dictated
/// by the SeekBehavior specified.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeekInfo {
    /// The position to start the deliver from
    #[prost(message, optional, tag = "1")]
    pub start: ::core::option::Option<SeekPosition>,
    /// The position to stop the deliver
    #[prost(message, optional, tag = "2")]
    pub stop: ::core::option::Option<SeekPosition>,
    /// The behavior when a missing block is encountered
    #[prost(enumeration = "seek_info::SeekBehavior", tag = "3")]
    pub behavior: i32,
    /// How to respond to errors reported to the deliver service
    #[prost(enumeration = "seek_info::SeekErrorResponse", tag = "4")]
    pub error_response: i32,
    /// Defines what type of content to deliver in response to a request
    #[prost(enumeration = "seek_info::SeekContentType", tag = "5")]
    pub content_type: i32,
}
/// Nested message and enum types in `SeekInfo`.
pub mod seek_info {
    /// If BLOCK_UNTIL_READY is specified, the reply will block until the requested blocks are available,
    /// if FAIL_IF_NOT_READY is specified, the reply will return an error indicating that the block is not
    /// found.  To request that all blocks be returned indefinitely as they are created, behavior should be
    /// set to BLOCK_UNTIL_READY and the stop should be set to specified with a number of MAX_UINT64
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SeekBehavior {
        BlockUntilReady = 0,
        FailIfNotReady = 1,
    }
    impl SeekBehavior {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::BlockUntilReady => "BLOCK_UNTIL_READY",
                Self::FailIfNotReady => "FAIL_IF_NOT_READY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BLOCK_UNTIL_READY" => Some(Self::BlockUntilReady),
                "FAIL_IF_NOT_READY" => Some(Self::FailIfNotReady),
                _ => None,
            }
        }
    }
    /// SeekErrorTolerance indicates to the server how block provider errors should be tolerated.  By default,
    /// if the deliver service detects a problem in the underlying block source (typically, in the orderer,
    /// a consenter error), it will begin to reject deliver requests.  This is to prevent a client from waiting
    /// for blocks from an orderer which is stuck in an errored state.  This is almost always the desired behavior
    /// and clients should stick with the default STRICT checking behavior.  However, in some scenarios, particularly
    /// when attempting to recover from a crash or other corruption, it's desirable to force an orderer to respond
    /// with blocks on a best effort basis, even if the backing consensus implementation is in an errored state.
    /// In this case, set the SeekErrorResponse to BEST_EFFORT to ignore the consenter errors.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SeekErrorResponse {
        Strict = 0,
        BestEffort = 1,
    }
    impl SeekErrorResponse {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Strict => "STRICT",
                Self::BestEffort => "BEST_EFFORT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STRICT" => Some(Self::Strict),
                "BEST_EFFORT" => Some(Self::BestEffort),
                _ => None,
            }
        }
    }
    /// SeekContentType indicates what type of content to deliver in response to a request. If BLOCK is specified,
    /// the orderer will stream blocks back to the peer. This is the default behavior. If HEADER_WITH_SIG is  specified, the
    /// orderer will stream only a the header and the signature, and the payload field will be set to nil. This allows
    /// the requester to ascertain that the respective signed block exists in the orderer (or cluster of orderers).
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SeekContentType {
        Block = 0,
        HeaderWithSig = 1,
    }
    impl SeekContentType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Block => "BLOCK",
                Self::HeaderWithSig => "HEADER_WITH_SIG",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BLOCK" => Some(Self::Block),
                "HEADER_WITH_SIG" => Some(Self::HeaderWithSig),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeliverResponse {
    #[prost(oneof = "deliver_response::Type", tags = "1, 2")]
    pub r#type: ::core::option::Option<deliver_response::Type>,
}
/// Nested message and enum types in `DeliverResponse`.
pub mod deliver_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(enumeration = "super::super::common::Status", tag = "1")]
        Status(i32),
        #[prost(message, tag = "2")]
        Block(super::super::common::Block),
    }
}
/// Generated client implementations.
pub mod atomic_broadcast_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AtomicBroadcastClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> AtomicBroadcastClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AtomicBroadcastClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AtomicBroadcastClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
        pub async fn broadcast(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::super::common::Envelope,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::BroadcastResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/orderer.AtomicBroadcast/Broadcast",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("orderer.AtomicBroadcast", "Broadcast"));
            self.inner.streaming(req, path, codec).await
        }
        /// deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
        pub async fn deliver(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::super::common::Envelope,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::DeliverResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/orderer.AtomicBroadcast/Deliver",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("orderer.AtomicBroadcast", "Deliver"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod atomic_broadcast_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AtomicBroadcastServer.
    #[async_trait]
    pub trait AtomicBroadcast: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the Broadcast method.
        type BroadcastStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::BroadcastResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
        async fn broadcast(
            &self,
            request: tonic::Request<tonic::Streaming<super::super::common::Envelope>>,
        ) -> std::result::Result<tonic::Response<Self::BroadcastStream>, tonic::Status>;
        /// Server streaming response type for the Deliver method.
        type DeliverStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::DeliverResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
        async fn deliver(
            &self,
            request: tonic::Request<tonic::Streaming<super::super::common::Envelope>>,
        ) -> std::result::Result<tonic::Response<Self::DeliverStream>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct AtomicBroadcastServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AtomicBroadcastServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AtomicBroadcastServer<T>
    where
        T: AtomicBroadcast,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/orderer.AtomicBroadcast/Broadcast" => {
                    #[allow(non_camel_case_types)]
                    struct BroadcastSvc<T: AtomicBroadcast>(pub Arc<T>);
                    impl<
                        T: AtomicBroadcast,
                    > tonic::server::StreamingService<super::super::common::Envelope>
                    for BroadcastSvc<T> {
                        type Response = super::BroadcastResponse;
                        type ResponseStream = T::BroadcastStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::super::common::Envelope>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AtomicBroadcast>::broadcast(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BroadcastSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/orderer.AtomicBroadcast/Deliver" => {
                    #[allow(non_camel_case_types)]
                    struct DeliverSvc<T: AtomicBroadcast>(pub Arc<T>);
                    impl<
                        T: AtomicBroadcast,
                    > tonic::server::StreamingService<super::super::common::Envelope>
                    for DeliverSvc<T> {
                        type Response = super::DeliverResponse;
                        type ResponseStream = T::DeliverStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::super::common::Envelope>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AtomicBroadcast>::deliver(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeliverSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AtomicBroadcastServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "orderer.AtomicBroadcast";
    impl<T> tonic::server::NamedService for AtomicBroadcastServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsensusType {
    /// The consensus type: "solo" or "etcdraft".
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// Opaque metadata, dependent on the consensus type.
    #[prost(bytes = "vec", tag = "2")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// The state signals the ordering service to go into maintenance mode, typically for consensus-type migration.
    #[prost(enumeration = "consensus_type::State", tag = "3")]
    pub state: i32,
}
/// Nested message and enum types in `ConsensusType`.
pub mod consensus_type {
    /// State defines the orderer mode of operation, typically for consensus-type migration.
    /// NORMAL is during normal operation, when consensus-type migration is not, and can not, take place.
    /// MAINTENANCE is when the consensus-type can be changed.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Normal = 0,
        Maintenance = 1,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Normal => "STATE_NORMAL",
                Self::Maintenance => "STATE_MAINTENANCE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_NORMAL" => Some(Self::Normal),
                "STATE_MAINTENANCE" => Some(Self::Maintenance),
                _ => None,
            }
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchSize {
    /// Simply specified as number of messages for now, in the future
    /// we may want to allow this to be specified by size in bytes
    #[prost(uint32, tag = "1")]
    pub max_message_count: u32,
    /// The byte count of the serialized messages in a batch cannot
    /// exceed this value.
    #[prost(uint32, tag = "2")]
    pub absolute_max_bytes: u32,
    /// The byte count of the serialized messages in a batch should not
    /// exceed this value.
    #[prost(uint32, tag = "3")]
    pub preferred_max_bytes: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchTimeout {
    /// Any duration string parseable by ParseDuration():
    /// <https://golang.org/pkg/time/#ParseDuration>
    #[prost(string, tag = "1")]
    pub timeout: ::prost::alloc::string::String,
}
/// Carries a list of bootstrap brokers, i.e. this is not the exclusive set of
/// brokers an ordering service
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KafkaBrokers {
    /// Each broker here should be identified using the (IP|host):port notation,
    /// e.g. 127.0.0.1:7050, or localhost:7050 are valid entries
    #[prost(string, repeated, tag = "1")]
    pub brokers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// ChannelRestrictions is the mssage which conveys restrictions on channel creation for an orderer
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChannelRestrictions {
    /// The max count of channels to allow to be created, a value of 0 indicates no limit
    #[prost(uint64, tag = "1")]
    pub max_count: u64,
}
/// ClusterNodeServiceStepRequest wraps a message that is sent to a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterNodeServiceStepRequest {
    #[prost(oneof = "cluster_node_service_step_request::Payload", tags = "1, 2, 3")]
    pub payload: ::core::option::Option<cluster_node_service_step_request::Payload>,
}
/// Nested message and enum types in `ClusterNodeServiceStepRequest`.
pub mod cluster_node_service_step_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// node_conrequest is a consensus specific message between the cluster memebers.
        #[prost(message, tag = "1")]
        NodeConrequest(super::NodeConsensusRequest),
        /// node_tranrequest is a relay of a transaction.
        #[prost(message, tag = "2")]
        NodeTranrequest(super::NodeTransactionOrderRequest),
        /// Auth authentiates the member that initiated the stream
        #[prost(message, tag = "3")]
        NodeAuthrequest(super::NodeAuthRequest),
    }
}
/// ClusterNodeServiceStepResponse is a message received from a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterNodeServiceStepResponse {
    #[prost(oneof = "cluster_node_service_step_response::Payload", tags = "1")]
    pub payload: ::core::option::Option<cluster_node_service_step_response::Payload>,
}
/// Nested message and enum types in `ClusterNodeServiceStepResponse`.
pub mod cluster_node_service_step_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        TranorderRes(super::TransactionOrderResponse),
    }
}
/// NodeConsensusRequest is a consensus specific message sent to a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeConsensusRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
}
/// NodeTransactionOrderRequest wraps a transaction to be sent for ordering.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeTransactionOrderRequest {
    /// last_validation_seq denotes the last configuration sequence at which the
    /// sender validated this message.
    #[prost(uint64, tag = "1")]
    pub last_validation_seq: u64,
    /// content is the fabric transaction
    /// that is forwarded to the cluster member.
    #[prost(message, optional, tag = "2")]
    pub payload: ::core::option::Option<super::common::Envelope>,
}
/// TransactionOrderResponse returns a success
/// or failure status to the sender.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionOrderResponse {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tx_id: ::prost::alloc::string::String,
    /// Status code, which may be used to programatically respond to success/failure.
    #[prost(enumeration = "super::common::Status", tag = "3")]
    pub status: i32,
    /// Info string which may contain additional information about the returned status.
    #[prost(string, tag = "4")]
    pub info: ::prost::alloc::string::String,
}
/// NodeAuthRequest for authenticate the stream
/// between the cluster members
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeAuthRequest {
    /// version represents the fields on which the signature is computed
    #[prost(uint32, tag = "1")]
    pub version: u32,
    /// signature is verifiable using the initiator's public key
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// timestamp indicates the freshness of the request; expected to be within the margin
    /// of the responsder's local time
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// from_id is the numerical identifier of the initiator of the connection
    #[prost(uint64, tag = "4")]
    pub from_id: u64,
    /// to_id is the numerical identifier of the node that is being connected to
    #[prost(uint64, tag = "5")]
    pub to_id: u64,
    /// session_binding is verifiable using application level protocol
    #[prost(bytes = "vec", tag = "6")]
    pub session_binding: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "7")]
    pub channel: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod cluster_node_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service ClusterNodeService defines communication between cluster members.
    #[derive(Debug, Clone)]
    pub struct ClusterNodeServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ClusterNodeServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClusterNodeServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClusterNodeServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Step passes an implementation-specific message to another cluster member.
        pub async fn step(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::ClusterNodeServiceStepRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::ClusterNodeServiceStepResponse>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/orderer.ClusterNodeService/Step",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("orderer.ClusterNodeService", "Step"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod cluster_node_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClusterNodeServiceServer.
    #[async_trait]
    pub trait ClusterNodeService: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the Step method.
        type StepStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::ClusterNodeServiceStepResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        /// Step passes an implementation-specific message to another cluster member.
        async fn step(
            &self,
            request: tonic::Request<
                tonic::Streaming<super::ClusterNodeServiceStepRequest>,
            >,
        ) -> std::result::Result<tonic::Response<Self::StepStream>, tonic::Status>;
    }
    /// Service ClusterNodeService defines communication between cluster members.
    #[derive(Debug)]
    pub struct ClusterNodeServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClusterNodeServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClusterNodeServiceServer<T>
    where
        T: ClusterNodeService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/orderer.ClusterNodeService/Step" => {
                    #[allow(non_camel_case_types)]
                    struct StepSvc<T: ClusterNodeService>(pub Arc<T>);
                    impl<
                        T: ClusterNodeService,
                    > tonic::server::StreamingService<
                        super::ClusterNodeServiceStepRequest,
                    > for StepSvc<T> {
                        type Response = super::ClusterNodeServiceStepResponse;
                        type ResponseStream = T::StepStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::ClusterNodeServiceStepRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClusterNodeService>::step(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StepSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClusterNodeServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "orderer.ClusterNodeService";
    impl<T> tonic::server::NamedService for ClusterNodeServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// StepRequest wraps a message that is sent to a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepRequest {
    #[prost(oneof = "step_request::Payload", tags = "1, 2")]
    pub payload: ::core::option::Option<step_request::Payload>,
}
/// Nested message and enum types in `StepRequest`.
pub mod step_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// consensus_request is a consensus specific message.
        #[prost(message, tag = "1")]
        ConsensusRequest(super::ConsensusRequest),
        /// submit_request is a relay of a transaction.
        #[prost(message, tag = "2")]
        SubmitRequest(super::SubmitRequest),
    }
}
/// StepResponse is a message received from a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepResponse {
    #[prost(oneof = "step_response::Payload", tags = "1")]
    pub payload: ::core::option::Option<step_response::Payload>,
}
/// Nested message and enum types in `StepResponse`.
pub mod step_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        SubmitRes(super::SubmitResponse),
    }
}
/// ConsensusRequest is a consensus specific message sent to a cluster member.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsensusRequest {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
}
/// SubmitRequest wraps a transaction to be sent for ordering.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitRequest {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    /// last_validation_seq denotes the last
    /// configuration sequence at which the
    /// sender validated this message.
    #[prost(uint64, tag = "2")]
    pub last_validation_seq: u64,
    /// content is the fabric transaction
    /// that is forwarded to the cluster member.
    #[prost(message, optional, tag = "3")]
    pub payload: ::core::option::Option<super::common::Envelope>,
}
/// SubmitResponse returns a success
/// or failure status to the sender.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitResponse {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    /// Status code, which may be used to programatically respond to success/failure.
    #[prost(enumeration = "super::common::Status", tag = "2")]
    pub status: i32,
    /// Info string which may contain additional information about the returned status.
    #[prost(string, tag = "3")]
    pub info: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod cluster_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Cluster defines communication between cluster members.
    #[derive(Debug, Clone)]
    pub struct ClusterClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ClusterClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClusterClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClusterClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Step passes an implementation-specific message to another cluster member.
        pub async fn step(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::StepRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StepResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/orderer.Cluster/Step");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("orderer.Cluster", "Step"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod cluster_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClusterServer.
    #[async_trait]
    pub trait Cluster: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the Step method.
        type StepStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StepResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Step passes an implementation-specific message to another cluster member.
        async fn step(
            &self,
            request: tonic::Request<tonic::Streaming<super::StepRequest>>,
        ) -> std::result::Result<tonic::Response<Self::StepStream>, tonic::Status>;
    }
    /// Cluster defines communication between cluster members.
    #[derive(Debug)]
    pub struct ClusterServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClusterServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClusterServer<T>
    where
        T: Cluster,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/orderer.Cluster/Step" => {
                    #[allow(non_camel_case_types)]
                    struct StepSvc<T: Cluster>(pub Arc<T>);
                    impl<T: Cluster> tonic::server::StreamingService<super::StepRequest>
                    for StepSvc<T> {
                        type Response = super::StepResponse;
                        type ResponseStream = T::StepStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::StepRequest>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Cluster>::step(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StepSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClusterServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "orderer.Cluster";
    impl<T> tonic::server::NamedService for ClusterServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
