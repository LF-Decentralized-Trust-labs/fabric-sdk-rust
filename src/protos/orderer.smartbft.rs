// This file is @generated by prost-build.
/// Options to be specified for all the smartbft nodes. These can be modified on a
/// per-channel basis.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Options {
    #[prost(uint64, tag = "1")]
    pub request_batch_max_count: u64,
    #[prost(uint64, tag = "2")]
    pub request_batch_max_bytes: u64,
    #[prost(string, tag = "3")]
    pub request_batch_max_interval: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub incoming_message_buffer_size: u64,
    #[prost(uint64, tag = "5")]
    pub request_pool_size: u64,
    #[prost(string, tag = "6")]
    pub request_forward_timeout: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub request_complain_timeout: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub request_auto_remove_timeout: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub request_max_bytes: u64,
    #[prost(string, tag = "10")]
    pub view_change_resend_interval: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub view_change_timeout: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub leader_heartbeat_timeout: ::prost::alloc::string::String,
    #[prost(uint64, tag = "13")]
    pub leader_heartbeat_count: u64,
    #[prost(string, tag = "14")]
    pub collect_timeout: ::prost::alloc::string::String,
    #[prost(bool, tag = "15")]
    pub sync_on_start: bool,
    #[prost(bool, tag = "16")]
    pub speed_up_view_change: bool,
    #[prost(enumeration = "options::Rotation", tag = "17")]
    pub leader_rotation: i32,
    #[prost(uint64, tag = "18")]
    pub decisions_per_leader: u64,
}
/// Nested message and enum types in `Options`.
pub mod options {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Rotation {
        Unspecified = 0,
        Off = 1,
        On = 2,
    }
    impl Rotation {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "ROTATION_UNSPECIFIED",
                Self::Off => "ROTATION_OFF",
                Self::On => "ROTATION_ON",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ROTATION_UNSPECIFIED" => Some(Self::Unspecified),
                "ROTATION_OFF" => Some(Self::Off),
                "ROTATION_ON" => Some(Self::On),
                _ => None,
            }
        }
    }
}
