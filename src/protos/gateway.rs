// This file is @generated by prost-build.
/// EndorseRequest contains the details required to obtain sufficient endorsements for a
/// transaction to be committed to the ledger.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndorseRequest {
    /// The unique identifier for the transaction.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// Identifier of the channel this request is bound for.
    #[prost(string, tag = "2")]
    pub channel_id: ::prost::alloc::string::String,
    /// The signed proposal ready for endorsement.
    #[prost(message, optional, tag = "3")]
    pub proposed_transaction: ::core::option::Option<super::protos::SignedProposal>,
    /// If targeting the peers of specific organizations (e.g. for private data scenarios),
    /// the list of organizations' MSPIDs should be supplied here.
    #[prost(string, repeated, tag = "4")]
    pub endorsing_organizations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// EndorseResponse returns the result of endorsing a transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndorseResponse {
    /// The unsigned set of transaction responses from the endorsing peers for signing by the client
    /// before submitting to ordering service (via gateway).
    #[prost(message, optional, tag = "1")]
    pub prepared_transaction: ::core::option::Option<super::common::Envelope>,
}
/// SubmitRequest contains the details required to submit a transaction (update the ledger).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitRequest {
    /// Identifier of the transaction to submit.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// Identifier of the channel this request is bound for.
    #[prost(string, tag = "2")]
    pub channel_id: ::prost::alloc::string::String,
    /// The signed set of endorsed transaction responses to submit.
    #[prost(message, optional, tag = "3")]
    pub prepared_transaction: ::core::option::Option<super::common::Envelope>,
}
/// SubmitResponse returns the result of submitting a transaction.
///
/// Nothing yet
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitResponse {}
/// SignedCommitStatusRequest contains a serialized CommitStatusRequest message, and a digital signature for the
/// serialized request message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedCommitStatusRequest {
    /// Serialized CommitStatusRequest message.
    #[prost(bytes = "vec", tag = "1")]
    pub request: ::prost::alloc::vec::Vec<u8>,
    /// Signature for request message.
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// CommitStatusRequest contains the details required to check whether a transaction has been
/// successfully committed.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitStatusRequest {
    /// Identifier of the transaction to check.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// Identifier of the channel this request is bound for.
    #[prost(string, tag = "2")]
    pub channel_id: ::prost::alloc::string::String,
    /// Client requestor identity.
    #[prost(bytes = "vec", tag = "3")]
    pub identity: ::prost::alloc::vec::Vec<u8>,
}
/// CommitStatusResponse returns the result of committing a transaction.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CommitStatusResponse {
    /// The result of the transaction commit, as defined in peer/transaction.proto.
    #[prost(enumeration = "super::protos::TxValidationCode", tag = "1")]
    pub result: i32,
    /// Block number that contains the transaction.
    #[prost(uint64, tag = "2")]
    pub block_number: u64,
}
/// EvaluateRequest contains the details required to evaluate a transaction (query the ledger).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluateRequest {
    /// Identifier of the transaction to evaluate.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// Identifier of the channel this request is bound for.
    #[prost(string, tag = "2")]
    pub channel_id: ::prost::alloc::string::String,
    /// The signed proposal ready for evaluation.
    #[prost(message, optional, tag = "3")]
    pub proposed_transaction: ::core::option::Option<super::protos::SignedProposal>,
    /// If targeting the peers of specific organizations (e.g. for private data scenarios),
    /// the list of organizations' MSPIDs should be supplied here.
    #[prost(string, repeated, tag = "4")]
    pub target_organizations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// EvaluateResponse returns the result of evaluating a transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluateResponse {
    /// The response that is returned by the transaction function, as defined
    /// in peer/proposal_response.proto.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<super::protos::Response>,
}
/// SignedChaincodeEventsRequest contains a serialized ChaincodeEventsRequest message, and a digital signature for the
/// serialized request message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedChaincodeEventsRequest {
    /// Serialized ChaincodeEventsRequest message.
    #[prost(bytes = "vec", tag = "1")]
    pub request: ::prost::alloc::vec::Vec<u8>,
    /// Signature for request message.
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// ChaincodeEventsRequest contains details of the chaincode events that the caller wants to receive.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChaincodeEventsRequest {
    /// Identifier of the channel this request is bound for.
    #[prost(string, tag = "1")]
    pub channel_id: ::prost::alloc::string::String,
    /// Name of the chaincode for which events are requested.
    #[prost(string, tag = "2")]
    pub chaincode_id: ::prost::alloc::string::String,
    /// Client requestor identity.
    #[prost(bytes = "vec", tag = "3")]
    pub identity: ::prost::alloc::vec::Vec<u8>,
    /// Position within the ledger at which to start reading events.
    #[prost(message, optional, tag = "4")]
    pub start_position: ::core::option::Option<super::orderer::SeekPosition>,
    /// Only returns events after this transaction ID. Transactions up to and including this one should be ignored. This
    /// is used to allow resume of event listening from a certain position within a start block specified by
    /// start_position.
    #[prost(string, tag = "5")]
    pub after_transaction_id: ::prost::alloc::string::String,
}
/// ChaincodeEventsResponse returns chaincode events emitted from a specific block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChaincodeEventsResponse {
    /// Chaincode events emitted by the requested chaincode. The events are presented in the same order that the
    /// transactions that emitted them appear within the block.
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<super::protos::ChaincodeEvent>,
    /// Block number in which the chaincode events were emitted.
    #[prost(uint64, tag = "2")]
    pub block_number: u64,
}
/// If any of the functions in the Gateway service returns an error, then it will be in the format of
/// a google.rpc.Status message. The 'details' field of this message will be populated with extra
/// information if the error is a result of one or more failed requests to remote peers or orderer nodes.
/// ErrorDetail contains details of errors that are received by any of the endorsing peers
/// as a result of processing the Evaluate or Endorse services, or from the ordering node(s) as a result of
/// processing the Submit service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorDetail {
    /// The address of the endorsing peer or ordering node that returned an error.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// The MSP Identifier of this node.
    #[prost(string, tag = "2")]
    pub msp_id: ::prost::alloc::string::String,
    /// The error message returned by this node.
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// ProposedTransaction contains the details required for offline signing prior to evaluating or endorsing
/// a transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProposedTransaction {
    /// Identifier of the proposed transaction.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// The signed proposal.
    #[prost(message, optional, tag = "2")]
    pub proposal: ::core::option::Option<super::protos::SignedProposal>,
    /// The list of endorsing organizations.
    #[prost(string, repeated, tag = "3")]
    pub endorsing_organizations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// PreparedTransaction contains the details required for offline signing prior to submitting a transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreparedTransaction {
    /// Identifier of the prepared transaction.
    #[prost(string, tag = "1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// The transaction envelope.
    #[prost(message, optional, tag = "2")]
    pub envelope: ::core::option::Option<super::common::Envelope>,
}
/// Generated client implementations.
pub mod gateway_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// The Gateway API for evaluating and submitting transactions via the gateway.
    /// Transaction evaluation (query) requires the invocation of the Evaluate service
    /// Transaction submission (ledger updates) is a two step process invoking Endorse
    /// followed by Submit. A third step, invoking CommitStatus, is required if the
    /// clients wish to wait for a Transaction to be committed.
    /// The proposal and transaction must be signed by the client before each step.
    #[derive(Debug, Clone)]
    pub struct GatewayClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> GatewayClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GatewayClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                    http::Request<tonic::body::Body>,
                    Response = http::Response<
                        <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                    >,
                >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GatewayClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// The Endorse service passes a proposed transaction to the gateway in order to
        /// obtain sufficient endorsement.
        /// The gateway will determine the endorsement plan for the requested chaincode and
        /// forward to the appropriate peers for endorsement. It will return to the client a
        /// prepared transaction in the form of an Envelope message as defined
        /// in common/common.proto. The client must sign the contents of this envelope
        /// before invoking the Submit service.
        pub async fn endorse(
            &mut self,
            request: impl tonic::IntoRequest<super::EndorseRequest>,
        ) -> std::result::Result<tonic::Response<super::EndorseResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gateway.Gateway/Endorse");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gateway.Gateway", "Endorse"));
            self.inner.unary(req, path, codec).await
        }
        /// The Submit service will process the prepared transaction returned from Endorse service
        /// once it has been signed by the client. It will wait for the transaction to be submitted to the
        /// ordering service but the client must invoke the CommitStatus service to wait for the transaction
        /// to be committed.
        pub async fn submit(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitRequest>,
        ) -> std::result::Result<tonic::Response<super::SubmitResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gateway.Gateway/Submit");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gateway.Gateway", "Submit"));
            self.inner.unary(req, path, codec).await
        }
        /// The CommitStatus service will indicate whether a prepared transaction previously submitted to
        /// the Submit service has been committed. It will wait for the commit to occur if it hasn’t already
        /// committed.
        pub async fn commit_status(
            &mut self,
            request: impl tonic::IntoRequest<super::SignedCommitStatusRequest>,
        ) -> std::result::Result<tonic::Response<super::CommitStatusResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gateway.Gateway/CommitStatus");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gateway.Gateway", "CommitStatus"));
            self.inner.unary(req, path, codec).await
        }
        /// The Evaluate service passes a proposed transaction to the gateway in order to invoke the
        /// transaction function and return the result to the client. No ledger updates are made.
        /// The gateway will select an appropriate peer to query based on block height and load.
        pub async fn evaluate(
            &mut self,
            request: impl tonic::IntoRequest<super::EvaluateRequest>,
        ) -> std::result::Result<tonic::Response<super::EvaluateResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gateway.Gateway/Evaluate");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gateway.Gateway", "Evaluate"));
            self.inner.unary(req, path, codec).await
        }
        /// The ChaincodeEvents service supplies a stream of responses, each containing all the events emitted by the
        /// requested chaincode for a specific block. The streamed responses are ordered by ascending block number. Responses
        /// are only returned for blocks that contain the requested events, while blocks not containing any of the requested
        /// events are skipped.
        pub async fn chaincode_events(
            &mut self,
            request: impl tonic::IntoRequest<super::SignedChaincodeEventsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ChaincodeEventsResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gateway.Gateway/ChaincodeEvents");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gateway.Gateway", "ChaincodeEvents"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod gateway_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GatewayServer.
    #[async_trait]
    pub trait Gateway: std::marker::Send + std::marker::Sync + 'static {
        /// The Endorse service passes a proposed transaction to the gateway in order to
        /// obtain sufficient endorsement.
        /// The gateway will determine the endorsement plan for the requested chaincode and
        /// forward to the appropriate peers for endorsement. It will return to the client a
        /// prepared transaction in the form of an Envelope message as defined
        /// in common/common.proto. The client must sign the contents of this envelope
        /// before invoking the Submit service.
        async fn endorse(
            &self,
            request: tonic::Request<super::EndorseRequest>,
        ) -> std::result::Result<tonic::Response<super::EndorseResponse>, tonic::Status>;
        /// The Submit service will process the prepared transaction returned from Endorse service
        /// once it has been signed by the client. It will wait for the transaction to be submitted to the
        /// ordering service but the client must invoke the CommitStatus service to wait for the transaction
        /// to be committed.
        async fn submit(
            &self,
            request: tonic::Request<super::SubmitRequest>,
        ) -> std::result::Result<tonic::Response<super::SubmitResponse>, tonic::Status>;
        /// The CommitStatus service will indicate whether a prepared transaction previously submitted to
        /// the Submit service has been committed. It will wait for the commit to occur if it hasn’t already
        /// committed.
        async fn commit_status(
            &self,
            request: tonic::Request<super::SignedCommitStatusRequest>,
        ) -> std::result::Result<tonic::Response<super::CommitStatusResponse>, tonic::Status>;
        /// The Evaluate service passes a proposed transaction to the gateway in order to invoke the
        /// transaction function and return the result to the client. No ledger updates are made.
        /// The gateway will select an appropriate peer to query based on block height and load.
        async fn evaluate(
            &self,
            request: tonic::Request<super::EvaluateRequest>,
        ) -> std::result::Result<tonic::Response<super::EvaluateResponse>, tonic::Status>;
        /// Server streaming response type for the ChaincodeEvents method.
        type ChaincodeEventsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ChaincodeEventsResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// The ChaincodeEvents service supplies a stream of responses, each containing all the events emitted by the
        /// requested chaincode for a specific block. The streamed responses are ordered by ascending block number. Responses
        /// are only returned for blocks that contain the requested events, while blocks not containing any of the requested
        /// events are skipped.
        async fn chaincode_events(
            &self,
            request: tonic::Request<super::SignedChaincodeEventsRequest>,
        ) -> std::result::Result<tonic::Response<Self::ChaincodeEventsStream>, tonic::Status>;
    }
    /// The Gateway API for evaluating and submitting transactions via the gateway.
    /// Transaction evaluation (query) requires the invocation of the Evaluate service
    /// Transaction submission (ledger updates) is a two step process invoking Endorse
    /// followed by Submit. A third step, invoking CommitStatus, is required if the
    /// clients wish to wait for a Transaction to be committed.
    /// The proposal and transaction must be signed by the client before each step.
    #[derive(Debug)]
    pub struct GatewayServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GatewayServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GatewayServer<T>
    where
        T: Gateway,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gateway.Gateway/Endorse" => {
                    #[allow(non_camel_case_types)]
                    struct EndorseSvc<T: Gateway>(pub Arc<T>);
                    impl<T: Gateway> tonic::server::UnaryService<super::EndorseRequest> for EndorseSvc<T> {
                        type Response = super::EndorseResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EndorseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Gateway>::endorse(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EndorseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gateway.Gateway/Submit" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitSvc<T: Gateway>(pub Arc<T>);
                    impl<T: Gateway> tonic::server::UnaryService<super::SubmitRequest> for SubmitSvc<T> {
                        type Response = super::SubmitResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Gateway>::submit(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gateway.Gateway/CommitStatus" => {
                    #[allow(non_camel_case_types)]
                    struct CommitStatusSvc<T: Gateway>(pub Arc<T>);
                    impl<T: Gateway> tonic::server::UnaryService<super::SignedCommitStatusRequest>
                        for CommitStatusSvc<T>
                    {
                        type Response = super::CommitStatusResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignedCommitStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as Gateway>::commit_status(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommitStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gateway.Gateway/Evaluate" => {
                    #[allow(non_camel_case_types)]
                    struct EvaluateSvc<T: Gateway>(pub Arc<T>);
                    impl<T: Gateway> tonic::server::UnaryService<super::EvaluateRequest> for EvaluateSvc<T> {
                        type Response = super::EvaluateResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EvaluateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as Gateway>::evaluate(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EvaluateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gateway.Gateway/ChaincodeEvents" => {
                    #[allow(non_camel_case_types)]
                    struct ChaincodeEventsSvc<T: Gateway>(pub Arc<T>);
                    impl<T: Gateway>
                        tonic::server::ServerStreamingService<super::SignedChaincodeEventsRequest>
                        for ChaincodeEventsSvc<T>
                    {
                        type Response = super::ChaincodeEventsResponse;
                        type ResponseStream = T::ChaincodeEventsStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignedChaincodeEventsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Gateway>::chaincode_events(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChaincodeEventsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for GatewayServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gateway.Gateway";
    impl<T> tonic::server::NamedService for GatewayServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
