// This file is @generated by prost-build.
/// TxReadWriteSet encapsulates a read-write set for a transaction
/// DataModel specifies the enum value of the data model
/// ns_rwset field specifies a list of chaincode specific read-write set (one for each chaincode)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TxReadWriteSet {
    #[prost(enumeration = "tx_read_write_set::DataModel", tag = "1")]
    pub data_model: i32,
    #[prost(message, repeated, tag = "2")]
    pub ns_rwset: ::prost::alloc::vec::Vec<NsReadWriteSet>,
}
/// Nested message and enum types in `TxReadWriteSet`.
pub mod tx_read_write_set {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DataModel {
        Kv = 0,
    }
    impl DataModel {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Kv => "KV",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "KV" => Some(Self::Kv),
                _ => None,
            }
        }
    }
}
/// NsReadWriteSet encapsulates the read-write set for a chaincode
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NsReadWriteSet {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    /// Data model specific serialized proto message (e.g., kvrwset.KVRWSet for KV and Document data models)
    #[prost(bytes = "vec", tag = "2")]
    pub rwset: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "3")]
    pub collection_hashed_rwset: ::prost::alloc::vec::Vec<CollectionHashedReadWriteSet>,
}
/// CollectionHashedReadWriteSet encapsulate the hashed representation for the private read-write set for a collection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionHashedReadWriteSet {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
    /// Data model specific serialized proto message (e.g., kvrwset.HashedRWSet for KV and Document data models)
    #[prost(bytes = "vec", tag = "2")]
    pub hashed_rwset: ::prost::alloc::vec::Vec<u8>,
    /// Hash of entire private read-write set for a specific collection. This helps in authenticating the private read-write set efficiently
    #[prost(bytes = "vec", tag = "3")]
    pub pvt_rwset_hash: ::prost::alloc::vec::Vec<u8>,
}
/// TxPvtReadWriteSet encapsulate the private read-write set for a transaction
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TxPvtReadWriteSet {
    #[prost(enumeration = "tx_read_write_set::DataModel", tag = "1")]
    pub data_model: i32,
    #[prost(message, repeated, tag = "2")]
    pub ns_pvt_rwset: ::prost::alloc::vec::Vec<NsPvtReadWriteSet>,
}
/// NsPvtReadWriteSet encapsulates the private read-write set for a chaincode
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NsPvtReadWriteSet {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub collection_pvt_rwset: ::prost::alloc::vec::Vec<CollectionPvtReadWriteSet>,
}
/// CollectionPvtReadWriteSet encapsulates the private read-write set for a collection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionPvtReadWriteSet {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
    /// Data model specific serialized proto message (e.g., kvrwset.KVRWSet for KV and Document data models)
    #[prost(bytes = "vec", tag = "2")]
    pub rwset: ::prost::alloc::vec::Vec<u8>,
}
